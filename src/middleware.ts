// middleware.ts
import { withAuth } from "next-auth/middleware";
import { NextRequest, NextResponse } from "next/server";

export default withAuth(
    function middleware(req: NextRequest) {
        const token = req.nextauth.token;
        const origin = req.nextUrl.origin;

        console.log("üîí Token JWT dans middleware :", token);

        if (!token) {
            console.log("‚ùå Aucun token trouv√©");
            return NextResponse.redirect(new URL("/sign-in", origin));
        }

        console.log("üß™ Token dans middleware :", token);

        if (!token.role) {
            console.log("‚ùå Aucun r√¥le d√©fini dans le token");
            return NextResponse.redirect(new URL("/sign-in", origin));
        }


        if (!token?.role) {
            console.log("üîí Pas de r√¥le d√©fini, redirection vers /sign-in");
            return NextResponse.redirect(new URL("/sign-in", origin));
        }

        if (token.role !== "ADMIN") {
            console.log("‚õî Acc√®s refus√© pour r√¥le :", token.role);
            return NextResponse.redirect(new URL("/unauthorized", origin));
        }

        console.log("‚úÖ Acc√®s autoris√© √† l'admin");
        return NextResponse.next();
    },
    {
        pages: {
            signIn: "/sign-in",
        },
    }
);

export const config = {
    matcher: ["/admin/:path*"],
};
